# .github/workflows/pull-request.yml
name: Pull Request Checks

on:
  pull_request:
    branches: [ master ] # Upewnij siƒô, ≈ºe nazwa ga≈Çƒôzi g≈Ç√≥wnej jest poprawna
    types: [ opened, synchronize, reopened ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        # ID nie jest ju≈º krytycznie potrzebne, ale mo≈ºe zostaƒá
        # WA≈ªNE: Usuniƒôto continue-on-error: true
        run: npm run lint # Pozw√≥l jobowi zawie≈õƒá, je≈õli lintowanie zwr√≥ci b≈ÇƒÖd

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests with Coverage
        run: npm run test:coverage -- --reporter=json --outputFile=vitest-summary.json # Pozw√≥l jobowi zawie≈õƒá, je≈õli testy nie przejdƒÖ

      - name: Upload Test Summary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: vitest-summary.json
          retention-days: 1

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 5

  status-comment:
    name: Post Status Comment
    runs-on: ubuntu-latest
    # Zale≈ºy od wynik√≥w LINT i TEST
    needs: [lint, test]
    # WA≈ªNE: Uruchamiaj ten job ZAWSZE, nawet je≈õli poprzednie zawiod≈Çy
    if: always()
    permissions:
      pull-requests: write

    steps:
      - name: Download Test Summary Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-summary
        # Ignoruj b≈ÇƒÖd, je≈õli artefakt nie istnieje (np. job testowy zawi√≥d≈Ç i nie zapisa≈Ç)
        continue-on-error: true

      - name: Create Status Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const prNumber = context.issue.number;

            if (!prNumber) {
              core.setFailed('Could not get PR number from context.');
              return;
            }

            // --- Pobieranie wynik√≥w z 'needs' ---
            const lintResult = "${{ needs.lint.result }}"; // Teraz powinno byƒá 'failure' je≈õli lint zawi√≥d≈Ç
            const testResult = "${{ needs.test.result }}"; // Teraz powinno byƒá 'failure' je≈õli test zawi√≥d≈Ç

            // --- Status Lintowania ---
            const lintStatus = lintResult === 'success' ? '‚úÖ' : '‚ùå';
            let lintComment = `Lint Results ${lintStatus}\n`;
            if (lintResult !== 'success') {
              lintComment += `‚ùå Linting failed. Please check the 'Lint Code' job logs for details.\n`;
            } else {
               lintComment += `‚úÖ Linting passed.\n`;
            }

            // --- Status Test√≥w ---
            const testStatus = testResult === 'success' ? '‚úÖ' : '‚ùå';
            let testComment = `\nTest Results ${testStatus}\n`; // Ta linijka teraz poka≈ºe ‚ùå je≈õli testy zawiod≈Çy

            let passedTests = 0;
            let failedTests = 0;
            let skippedTests = 0;
            let totalTests = 0;
            let testStatsAvailable = false;
            const summaryPath = './vitest-summary.json';

            // Tylko pr√≥buj parsowaƒá je≈õli job testowy siƒô powi√≥d≈Ç LUB je≈õli plik istnieje
            // (plik mo≈ºe istnieƒá nawet je≈õli job testowy ostatecznie zawi√≥d≈Ç, je≈õli zosta≈Ç wygenerowany przed b≈Çƒôdem)
            if (fs.existsSync(summaryPath)) {
               try {
                  const summaryRaw = fs.readFileSync(summaryPath, 'utf8');
                  const summary = JSON.parse(summaryRaw);
                 // ... (ta sama logika parsowania co poprzednio) ...
                  if (summary && summary.testResults && Array.isArray(summary.testResults)) {
                      summary.testResults.forEach(fileResult => {
                        if (fileResult && fileResult.assertionResults && Array.isArray(fileResult.assertionResults)) {
                          passedTests += fileResult.assertionResults.filter(r => r && r.status === 'passed').length;
                          failedTests += fileResult.assertionResults.filter(r => r && r.status === 'failed').length;
                          skippedTests += fileResult.assertionResults.filter(r => r && (r.status === 'pending' || r.status === 'todo' || r.status === 'skipped')).length;
                          totalTests += fileResult.assertionResults.length;
                        } else { console.warn('Unexpected structure within testResults item:', fileResult); }
                      });
                      testStatsAvailable = true;
                   } else if (summary && typeof summary.numTotalTests !== 'undefined') {
                      passedTests = summary.numPassedTests ?? 0;
                      failedTests = summary.numFailedTests ?? 0;
                      skippedTests = (summary.numPendingTests ?? 0) + (summary.numTodoTests ?? 0) + (summary.numSkippedTests ?? 0) ;
                      totalTests = summary.numTotalTests ?? 0;
                      testStatsAvailable = true;
                   } else { console.warn('Unexpected vitest summary JSON structure:', summary); }

                  if (testStatsAvailable) {
                     testComment += `Test Statistics\n`;
                     testComment += `‚úÖ Passed Tests: ${passedTests}\n`;
                     // Poprawka: Pokazuj ‚ùå obok Failed Tests je≈õli sƒÖ > 0
                     testComment += failedTests > 0 ? `‚ùå Failed Tests: ${failedTests}\n` : `‚úÖ Failed Tests: 0\n`;
                     testComment += skippedTests > 0 ? `‚ö†Ô∏è Skipped Tests: ${skippedTests}\n` : `‚úÖ Skipped Tests: 0\n`;
                     testComment += `üìä Total Tests Run: ${totalTests}\n`;
                  } else if (testResult === 'success') {
                    testComment += `‚úÖ Tests passed, but failed to parse detailed statistics from vitest-summary.json.\n`;
                  } else {
                     testComment += `‚ùå Tests failed. Failed to parse detailed statistics. Check the 'Unit Tests' job logs.\n`;
                  }
               } catch (error) {
                 console.error("Error processing test summary:", error);
                 testComment += `‚ö†Ô∏è Error processing test results.\n`;
                 if (testResult !== 'success') {
                    testComment += `‚ùå Tests failed status confirmed. Check the 'Unit Tests' job logs.\n`;
                 }
               }
            } else {
                 // Plik nie istnieje
                 testComment += `‚ö†Ô∏è Could not find test summary file (${summaryPath}).\n`;
                 if (testResult !== 'success') {
                   testComment += `‚ùå Tests failed status confirmed. Check the 'Unit Tests' job logs.\n`;
                 } else {
                    // Rzadki przypadek: job 'test' sukces, ale artefakt nie istnieje
                    testComment += `ü§î Tests job reported success, but the summary artifact is missing.\n`;
                 }
            }

             // --- Status Og√≥lny ---
            let overallStatus = '\nOverall Status\n';
            // Teraz 'lintResult' i 'testResult' bƒôdƒÖ mia≈Çy poprawne warto≈õci 'success' lub 'failure'
            if (lintResult === 'success' && testResult === 'success') {
              overallStatus += '‚úÖ All checks passed successfully!';
            } else {
              overallStatus += '‚ùå Some checks have failed. Please review the details above. ‚ö†Ô∏è';
            }

            // --- Konstrukcja finalnego komentarza ---
            const finalComment = `${lintComment}${testComment}${overallStatus}`;

            // --- Publikacja komentarza ---
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: finalComment
              });
            } catch (commentError) {
               console.error("Failed to create comment:", commentError);
               core.setFailed('Failed to post status comment.');
            }

      - name: Fail workflow if checks failed
        # Ten krok jawnie oznacza workflow jako nieudany w UI GitHuba, je≈õli kt√≥ry≈õ z kluczowych job√≥w zawi√≥d≈Ç.
        if: needs.lint.result != 'success' || needs.test.result != 'success'
        run: exit 1