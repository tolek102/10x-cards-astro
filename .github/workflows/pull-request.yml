# .github/workflows/pull-request.yml
name: Pull Request Checks

# Uruchamiaj workflow dla Pull Requestów kierowanych do gałęzi 'master'
# dla zdarzeń: otwarcie, synchronizacja (nowy commit), ponowne otwarcie
on:
  pull_request:
    branches: [ master ] # Upewnij się, że nazwa gałęzi głównej jest poprawna (master/main)
    types: [ opened, synchronize, reopened ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc' # Używa wersji Node.js z pliku .nvmrc
          cache: 'npm' # Włącza cache'owanie zależności npm

      - name: Install Dependencies
        run: npm ci # Używaj 'ci' dla czystej instalacji w CI/CD

      - name: Run ESLint
        id: lint-step # Nadajemy ID krokowi, aby sprawdzić jego wynik później
        # Uruchamia lintowanie. Pozwalamy na kontynuację nawet jeśli są błędy,
        # aby móc uruchomić testy i finalny komentarz.
        run: npm run lint
        continue-on-error: true # Nie zatrzymuj workflow, jeśli lintowanie zawiedzie

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint # Uruchom ten job dopiero po zakończeniu joba 'lint' (nawet jeśli się nie powiedzie)
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests with Coverage
        id: test-step # Nadajemy ID krokowi
        # Uruchamia testy z coverage. Dodajemy reportera JSON, aby łatwo sparsować wyniki.
        # Flaga '--' przekazuje argumenty bezpośrednio do vitest.
        run: npm run test:coverage -- --reporter=json --outputFile=vitest-summary.json
        continue-on-error: true # Nie zatrzymuj workflow, jeśli testy zawiodą

      - name: Upload Test Summary Artifact
        # Zapisuje podsumowanie testów jako artefakt, aby job z komentarzem mógł je odczytać
        uses: actions/upload-artifact@v4
        if: always() # Zawsze próbuj zapisać artefakt, nawet jeśli krok testów się nie powiódł
        with:
          name: test-summary
          path: vitest-summary.json
          retention-days: 1 # Przechowuj artefakt tylko przez 1 dzień

      - name: Upload Coverage Artifact
        # Zapisuje pełny raport coverage jako artefakt (opcjonalne, ale przydatne)
        uses: actions/upload-artifact@v4
        if: always() # Zawsze próbuj zapisać artefakt
        with:
          name: coverage-report
          path: coverage/ # Domyślny katalog dla raportów coverage Vitest
          retention-days: 5

  status-comment:
    name: Post Status Comment
    runs-on: ubuntu-latest
    needs: [lint, test] # Uruchom ten job po zakończeniu 'lint' i 'test'
    # Uruchamiaj ten job zawsze, nawet jeśli poprzednie zawiodły, aby podsumować status
    if: always()
    permissions:
      pull-requests: write # Wymagane uprawnienia do dodawania komentarzy do PR

    steps:
      - name: Download Test Summary Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-summary
        # Ignoruj błąd, jeśli artefakt nie istnieje (np. job testowy zawiódł bardzo wcześnie)
        continue-on-error: true

      - name: Create Status Comment
        uses: actions/github-script@v7
        id: comment-script
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const prNumber = context.issue.number;
            if (!prNumber) {
              console.log('Could not get PR number from context, exiting');
              return;
            }

            // --- Status Lintowania ---
            const lintStatus = needs.lint.result === 'success' ? '✅' : '❌';
            let lintComment = `Lint Results ${lintStatus}\n`;
            // Uwaga: Pobranie dokładnej liczby błędów/ostrzeżeń z `npm run lint`
            // wymagałoby bardziej złożonego parsowania outputu lub użycia formattera JSON dla ESLint.
            // Dla uproszczenia, pokazujemy tylko ogólny status sukces/porażka.
            // Jeśli lintowanie zawiodło, dodajemy informację.
            if (needs.lint.result !== 'success') {
              lintComment += `❌ Linting failed. Please check the 'Lint Code' job logs for details.\n`;
            } else {
               lintComment += `✅ Linting passed.\n`;
            }

            // --- Status Testów ---
            const testStatus = needs.test.result === 'success' ? '✅' : '❌';
            let testComment = `\nTest Results ${testStatus}\n`;
            let passedTests = 0;
            let failedTests = 0;
            let skippedTests = 0; // Vitest oznacza je jako 'pending' lub 'todo'
            let totalTests = 0;
            let testStatsAvailable = false;

            try {
              if (fs.existsSync('./vitest-summary.json')) {
                const summaryRaw = fs.readFileSync('./vitest-summary.json', 'utf8');
                const summary = JSON.parse(summaryRaw);
                // Sumujemy statystyki ze wszystkich plików testowych w raporcie
                summary.testResults.forEach(fileResult => {
                  passedTests += fileResult.assertionResults.filter(r => r.status === 'passed').length;
                  failedTests += fileResult.assertionResults.filter(r => r.status === 'failed').length;
                  skippedTests += fileResult.assertionResults.filter(r => r.status === 'pending' || r.status === 'todo').length;
                  totalTests += fileResult.assertionResults.length;
                });
                // Vitest JSON reporter w starszych wersjach mógł mieć inną strukturę.
                // Alternatywnie, można użyć pól `numPassedTests`, `numFailedTests`, etc. jeśli są na top-level.
                // Dostosuj logikę parsowania w razie potrzeby do dokładnej struktury Twojego `vitest-summary.json`.
                // Przykładowe pola z nowszych wersji Vitest (jeśli dostępne):
                // passedTests = summary.numPassedTests ?? passedTests;
                // failedTests = summary.numFailedTests ?? failedTests;
                // skippedTests = summary.numPendingTests ?? skippedTests;
                // totalTests = summary.numTotalTests ?? totalTests;

                testStatsAvailable = true;

                testComment += `Test Statistics\n`;
                testComment += `✅ Passed Tests: ${passedTests}\n`;
                testComment += failedTests > 0 ? `❌ Failed Tests: ${failedTests}\n` : `✅ Failed Tests: 0\n`;
                testComment += skippedTests > 0 ? `⚠️ Skipped Tests: ${skippedTests}\n` : `✅ Skipped Tests: 0\n`;
                testComment += `📊 Total Tests Run: ${totalTests}\n`; // Można użyć totalTests lub sumy passed+failed+skipped
              } else {
                 testComment += `⚠️ Could not find test summary file (vitest-summary.json).\n`;
                 if (needs.test.result !== 'success') {
                   testComment += `❌ Tests failed. Check the 'Unit Tests' job logs.\n`;
                 }
              }
            } catch (error) {
              console.error("Error parsing test summary:", error);
              testComment += `⚠️ Error processing test results.\n`;
               if (needs.test.result !== 'success') {
                 testComment += `❌ Tests failed. Check the 'Unit Tests' job logs.\n`;
               }
            }

            // --- Status Ogólny ---
            let overallStatus = '\nOverall Status\n';
            if (needs.lint.result === 'success' && needs.test.result === 'success') {
              overallStatus += '✅ All checks passed successfully!';
            } else {
              overallStatus += '❌ Some checks have failed. Please review the details above. ⚠️';
            }

            // --- Konstrukcja finalnego komentarza ---
            const finalComment = `${lintComment}${testComment}${overallStatus}`;

            // --- Publikacja komentarza ---
            // Można dodać logikę do edycji istniejącego komentarza zamiast tworzenia nowego za każdym razem
            // ale dla uproszczenia tworzymy nowy.
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: finalComment
            });

      - name: Fail workflow if checks failed
        # Ten krok jawnie oznacza workflow jako nieudany, jeśli lint lub testy zawiodły.
        # Bez tego, workflow mógłby pokazać zielony ✓, bo job 'status-comment' się udał.
        if: needs.lint.result != 'success' || needs.test.result != 'success'
        run: exit 1