# .github/workflows/pull-request.yml
name: Pull Request Checks

# Uruchamiaj workflow dla Pull Request√≥w kierowanych do ga≈Çƒôzi 'master'
# dla zdarze≈Ñ: otwarcie, synchronizacja (nowy commit), ponowne otwarcie
on:
  pull_request:
    branches: [ master ] # Upewnij siƒô, ≈ºe nazwa ga≈Çƒôzi g≈Ç√≥wnej jest poprawna (master/main)
    types: [ opened, synchronize, reopened ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc' # U≈ºywa wersji Node.js z pliku .nvmrc
          cache: 'npm' # W≈ÇƒÖcza cache'owanie zale≈ºno≈õci npm

      - name: Install Dependencies
        run: npm ci # U≈ºywaj 'ci' dla czystej instalacji w CI/CD

      - name: Run ESLint
        id: lint-step # Nadajemy ID krokowi, aby sprawdziƒá jego wynik p√≥≈∫niej
        # Uruchamia lintowanie. Pozwalamy na kontynuacjƒô nawet je≈õli sƒÖ b≈Çƒôdy,
        # aby m√≥c uruchomiƒá testy i finalny komentarz.
        run: npm run lint
        continue-on-error: true # Nie zatrzymuj workflow, je≈õli lintowanie zawiedzie

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint # Uruchom ten job dopiero po zako≈Ñczeniu joba 'lint' (nawet je≈õli siƒô nie powiedzie)
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests with Coverage
        id: test-step # Nadajemy ID krokowi
        # Uruchamia testy z coverage. Dodajemy reportera JSON, aby ≈Çatwo sparsowaƒá wyniki.
        # Flaga '--' przekazuje argumenty bezpo≈õrednio do vitest.
        run: npm run test:coverage -- --reporter=json --outputFile=vitest-summary.json
        continue-on-error: true # Nie zatrzymuj workflow, je≈õli testy zawiodƒÖ

      - name: Upload Test Summary Artifact
        # Zapisuje podsumowanie test√≥w jako artefakt, aby job z komentarzem m√≥g≈Ç je odczytaƒá
        uses: actions/upload-artifact@v4
        if: always() # Zawsze pr√≥buj zapisaƒá artefakt, nawet je≈õli krok test√≥w siƒô nie powi√≥d≈Ç
        with:
          name: test-summary
          path: vitest-summary.json
          retention-days: 1 # Przechowuj artefakt tylko przez 1 dzie≈Ñ

      - name: Upload Coverage Artifact
        # Zapisuje pe≈Çny raport coverage jako artefakt (opcjonalne, ale przydatne)
        uses: actions/upload-artifact@v4
        if: always() # Zawsze pr√≥buj zapisaƒá artefakt
        with:
          name: coverage-report
          path: coverage/ # Domy≈õlny katalog dla raport√≥w coverage Vitest
          retention-days: 5

  status-comment:
    name: Post Status Comment
    runs-on: ubuntu-latest
    needs: [lint, test] # Uruchom ten job po zako≈Ñczeniu 'lint' i 'test'
    # Uruchamiaj ten job zawsze, nawet je≈õli poprzednie zawiod≈Çy, aby podsumowaƒá status
    if: always()
    permissions:
      pull-requests: write # Wymagane uprawnienia do dodawania komentarzy do PR

    steps:
      - name: Download Test Summary Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-summary
        # Ignoruj b≈ÇƒÖd, je≈õli artefakt nie istnieje (np. job testowy zawi√≥d≈Ç bardzo wcze≈õnie)
        continue-on-error: true

      - name: Create Status Comment
        uses: actions/github-script@v7
        id: comment-script
        # Wracamy do pr√≥by bezpo≈õredniego dostƒôpu do 'needs'
        # Zak≈Çadamy, ≈ºe actions/github-script@v7 wstrzykuje 'needs' do globalnego scope'u skryptu
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            // 'core' i 'context' sƒÖ zazwyczaj dostƒôpne globalnie lub przez parametry funkcji async
            const core = require('@actions/core');
            // 'github' i 'context' sƒÖ te≈º przekazywane jako argumenty do skryptu przez action runner
            // Zmienna 'needs' powinna byƒá dostƒôpna globalnie
            const prNumber = context.issue.number; // Dostƒôp do context nadal jest potrzebny dla PR number, repo, owner

            if (!prNumber) {
              core.setFailed('Could not get PR number from context.');
              return;
            }

            // --- Status Lintowania ---
            // U≈ºywamy teraz 'needs' bezpo≈õrednio
            // Sprawdzamy najpierw, czy 'needs' i 'needs.lint' istniejƒÖ
            if (typeof needs === 'undefined' || typeof needs.lint === 'undefined') {
               core.setFailed("Error: 'needs.lint' context is not available.");
               return; // Zako≈Ñcz, je≈õli kontekst 'needs' jest niedostƒôpny
            }
            const lintResult = needs.lint.result;
            const lintStatus = lintResult === 'success' ? '‚úÖ' : '‚ùå';
            let lintComment = `Lint Results ${lintStatus}\n`;
            if (lintResult !== 'success') {
              lintComment += `‚ùå Linting failed. Please check the 'Lint Code' job logs for details.\n`;
            } else {
               lintComment += `‚úÖ Linting passed.\n`;
            }

            // --- Status Test√≥w ---
            // Sprawdzamy najpierw, czy 'needs.test' istnieje
            if (typeof needs.test === 'undefined') {
               core.setFailed("Error: 'needs.test' context is not available.");
               return; // Zako≈Ñcz, je≈õli kontekst 'needs' jest niedostƒôpny
            }
            const testResult = needs.test.result;
            const testStatus = testResult === 'success' ? '‚úÖ' : '‚ùå';
            let testComment = `\nTest Results ${testStatus}\n`;
            let passedTests = 0;
            let failedTests = 0;
            let skippedTests = 0;
            let totalTests = 0;
            let testStatsAvailable = false;
            const summaryPath = './vitest-summary.json';

            try {
              if (fs.existsSync(summaryPath)) {
                const summaryRaw = fs.readFileSync(summaryPath, 'utf8');
                const summary = JSON.parse(summaryRaw);

                if (summary && summary.testResults && Array.isArray(summary.testResults)) {
                    summary.testResults.forEach(fileResult => {
                      if (fileResult && fileResult.assertionResults && Array.isArray(fileResult.assertionResults)) {
                        passedTests += fileResult.assertionResults.filter(r => r && r.status === 'passed').length;
                        failedTests += fileResult.assertionResults.filter(r => r && r.status === 'failed').length;
                        skippedTests += fileResult.assertionResults.filter(r => r && (r.status === 'pending' || r.status === 'todo' || r.status === 'skipped')).length;
                        totalTests += fileResult.assertionResults.length;
                      } else {
                         console.warn('Unexpected structure within testResults item:', fileResult);
                      }
                    });
                    testStatsAvailable = true;
                 } else if (summary && typeof summary.numTotalTests !== 'undefined') {
                    passedTests = summary.numPassedTests ?? 0;
                    failedTests = summary.numFailedTests ?? 0;
                    skippedTests = (summary.numPendingTests ?? 0) + (summary.numTodoTests ?? 0) + (summary.numSkippedTests ?? 0) ;
                    totalTests = summary.numTotalTests ?? 0;
                    testStatsAvailable = true;
                 } else {
                    console.warn('Unexpected vitest summary JSON structure:', summary);
                 }

                if (testStatsAvailable) {
                  testComment += `Test Statistics\n`;
                  testComment += `‚úÖ Passed Tests: ${passedTests}\n`;
                  testComment += failedTests > 0 ? `‚ùå Failed Tests: ${failedTests}\n` : `‚úÖ Failed Tests: 0\n`;
                  testComment += skippedTests > 0 ? `‚ö†Ô∏è Skipped Tests: ${skippedTests}\n` : `‚úÖ Skipped Tests: 0\n`;
                  testComment += `üìä Total Tests Run: ${totalTests}\n`;
                } else if (testResult === 'success') {
                  testComment += `‚úÖ Tests passed, but failed to parse detailed statistics from vitest-summary.json.\n`;
                }

              } else {
                 testComment += `‚ö†Ô∏è Could not find test summary file (${summaryPath}).\n`;
                 if (testResult !== 'success') {
                   testComment += `‚ùå Tests failed. Check the 'Unit Tests' job logs for details.\n`;
                 } else {
                   testComment += `ü§î Tests job reported success, but the summary artifact is missing.\n`;
                 }
              }
            } catch (error) {
              console.error("Error processing test summary:", error);
              testComment += `‚ö†Ô∏è Error processing test results.\n`;
               if (testResult !== 'success') {
                 testComment += `‚ùå Tests failed. Check the 'Unit Tests' job logs for details.\n`;
               }
            }

             // --- Status Og√≥lny ---
            let overallStatus = '\nOverall Status\n';
            // U≈ºywamy zmiennych 'lintResult' i 'testResult' pobranych z 'needs'
            if (lintResult === 'success' && testResult === 'success') {
              overallStatus += '‚úÖ All checks passed successfully!';
            } else {
              overallStatus += '‚ùå Some checks have failed. Please review the details above. ‚ö†Ô∏è';
            }

            // --- Konstrukcja finalnego komentarza ---
            const finalComment = `${lintComment}${testComment}${overallStatus}`;

            // --- Publikacja komentarza ---
            // U≈ºywamy 'github.rest' i 'context' przekazanych do skryptu
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: finalComment
              });
            } catch (commentError) {
               console.error("Failed to create comment:", commentError);
               core.setFailed('Failed to post status comment.'); // Oznacz krok jako nieudany
            }