---
import BaseLayout from "../../layouts/BaseLayout.astro";
---

<BaseLayout title="Rejestracja - 10x Cards">
  <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">Utwórz nowe konto</h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          Lub
          <a href="/auth/login" class="font-medium text-indigo-600 hover:text-indigo-500">
            zaloguj się do istniejącego konta
          </a>
        </p>
      </div>

      <form id="registerForm" class="mt-8 space-y-6">
        <div class="rounded-md shadow-sm -space-y-px">
          <div>
            <label for="email" class="sr-only">Email</label>
            <input
              id="email"
              name="email"
              type="email"
              required
              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
              placeholder="Adres email"
            />
          </div>
          <div>
            <label for="password" class="sr-only">Hasło</label>
            <input
              id="password"
              name="password"
              type="password"
              required
              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
              placeholder="Hasło"
            />
          </div>
          <div>
            <label for="confirmPassword" class="sr-only">Potwierdź hasło</label>
            <input
              id="confirmPassword"
              name="confirmPassword"
              type="password"
              required
              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
              placeholder="Potwierdź hasło"
            />
          </div>
        </div>

        <div>
          <button
            type="submit"
            class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Zarejestruj się
          </button>
        </div>
      </form>
    </div>
  </div>
</BaseLayout>

<script>
  import { showToast } from "../../lib/toast";
  import { logger } from "../../lib/services/loggerService";
  const displayToast = (message: string, type: "success" | "error" = "error") => {
    if (message?.trim() && typeof showToast === "function") {
      logger.info("Displaying toast:", { message, type });
      showToast(message, type);
    } else {
      logger.error("Cannot display toast:", {
        message,
        type,
        showToastAvailable: typeof showToast === "function",
      });
    }
  };

  document.addEventListener("DOMContentLoaded", () => {
    const urlParams = new URLSearchParams(window.location.search);
    const error = urlParams.get("error");

    if (error) {
      displayToast(error);
    }
  });

  document.getElementById("registerForm")?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);
    const email = formData.get("email")?.toString();
    const password = formData.get("password")?.toString();
    const confirmPassword = formData.get("confirmPassword")?.toString();

    if (!email || !password || !confirmPassword) {
      displayToast("Proszę wypełnić wszystkie pola");
      return;
    }

    if (password !== confirmPassword) {
      displayToast("Podane hasła nie są takie same");
      return;
    }

    try {
      const response = await fetch("/api/auth/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        let errorMessage = data.error || "Wystąpił błąd podczas rejestracji";
        if (errorMessage.includes("User already registered")) {
          errorMessage = "Użytkownik o tym adresie email jest już zarejestrowany";
        }
        displayToast(errorMessage);
        return;
      }

      displayToast("Konto zostało utworzone pomyślnie", "success");
      await new Promise((resolve) => setTimeout(resolve, 1000));

      const loginUrl = new URL("/creator", window.location.origin);

      if (document.startViewTransition) {
        document.startViewTransition(() => {
          window.location.href = loginUrl.toString();
        });
      } else {
        window.location.href = loginUrl.toString();
      }
    } catch (error) {
      displayToast(error instanceof Error ? error.message : "Wystąpił nieoczekiwany błąd");
    }
  });
</script>
