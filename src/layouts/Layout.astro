---
import "../styles/global.css";
import AuthModals from "../components/AuthModals.astro";

interface Props {
  title?: string;
}

const { title = "10x Astro Starter" } = Astro.props;
---

<!doctype html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flashcard Master - Learn Smarter</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .flashcard {
            perspective: 1000px;
            transition: all 0.3s ease;
        }
        .flashcard-inner {
            transition: transform 0.6s;
            transform-style: preserve-3d;
        }
        .flashcard.flipped .flashcard-inner {
            transform: rotateY(180deg);
        }
        .flashcard-front, .flashcard-back {
            backface-visibility: hidden;
            position: absolute;
            width: 100%;
            height: 100%;
        }
        .flashcard-back {
            transform: rotateY(180deg);
        }
        .textarea-container {
            position: relative;
        }
        .char-counter {
            position: absolute;
            right: 10px;
            bottom: 10px;
            background: rgba(255, 255, 255, 0.7);
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 0.8rem;
        }
        .error-char-counter {
            color: #ef4444;
        }
        .loading-dots {
            display: inline-flex;
            align-items: center;
            height: 1rem;
        }
        .loading-dots span {
            width: 6px;
            height: 6px;
            margin: 0 2px;
            background-color: currentColor;
            border-radius: 50%;
            display: inline-block;
            animation: bounce 1.4s infinite ease-in-out both;
        }
        .loading-dots span:nth-child(1) {
            animation-delay: -0.32s;
        }
        .loading-dots span:nth-child(2) {
            animation-delay: -0.16s;
        }
        @keyframes bounce {
            0%, 80%, 100% { 
                transform: scale(0);
            } 40% { 
                transform: scale(1);
            }
        }
        .edit-textarea {
            min-height: 80px;
            resize: vertical;
        }
        .tab-button {
            transition: all 0.2s ease;
        }
        .tab-button.active {
            border-bottom: 3px solid #6366f1;
            color: #6366f1;
            font-weight: 600;
        }
        .slide-in {
            animation: slideIn 0.3s ease-out forwards;
        }
        @keyframes slideIn {
            from {
                transform: translateY(20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }
        .auth-section {
            transition: all 0.3s ease;
        }
        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #6b7280;
        }
        .auth-container {
            max-width: 28rem;
            margin: 0 auto;
        }
        .auth-card {
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <AuthModals />

    <!-- Auth Modals -->
    <div id="login-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="auth-container">
            <div class="auth-card bg-white rounded-xl p-8">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800">Welcome Back</h2>
                    <button id="close-login-modal" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="login-form" class="space-y-4">
                    <div>
                        <label for="login-email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input type="email" id="login-email" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500" required>
                    </div>
                    <div class="relative">
                        <label for="login-password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                        <input type="password" id="login-password" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 pr-10" required>
                        <span class="password-toggle" onclick="togglePassword('login-password')">
                            <i class="far fa-eye"></i>
                        </span>
                    </div>
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <input id="remember-me" type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                            <label for="remember-me" class="ml-2 block text-sm text-gray-700">Remember me</label>
                        </div>
                        <button type="button" id="forgot-password-btn" class="text-sm text-indigo-600 hover:text-indigo-800">Forgot password?</button>
                    </div>
                    <button type="submit" class="w-full py-2 px-4 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                        Sign In
                    </button>
                    <div class="text-center text-sm text-gray-600">
                        Don't have an account? <button type="button" id="show-register-from-login" class="text-indigo-600 hover:text-indigo-800">Sign up</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div id="register-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="auth-container">
            <div class="auth-card bg-white rounded-xl p-8">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800">Create Account</h2>
                    <button id="close-register-modal" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="register-form" class="space-y-4">
                    <div>
                        <label for="register-name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                        <input type="text" id="register-name" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500" required>
                    </div>
                    <div>
                        <label for="register-email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input type="email" id="register-email" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500" required>
                    </div>
                    <div class="relative">
                        <label for="register-password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                        <input type="password" id="register-password" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 pr-10" required>
                        <span class="password-toggle" onclick="togglePassword('register-password')">
                            <i class="far fa-eye"></i>
                        </span>
                        <p class="mt-1 text-xs text-gray-500">Password must be at least 8 characters</p>
                    </div>
                    <div class="relative">
                        <label for="register-confirm-password" class="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
                        <input type="password" id="register-confirm-password" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 pr-10" required>
                        <span class="password-toggle" onclick="togglePassword('register-confirm-password')">
                            <i class="far fa-eye"></i>
                        </span>
                    </div>
                    <button type="submit" class="w-full py-2 px-4 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                        Create Account
                    </button>
                    <div class="text-center text-sm text-gray-600">
                        Already have an account? <button type="button" id="show-login-from-register" class="text-indigo-600 hover:text-indigo-800">Sign in</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div id="forgot-password-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="auth-container">
            <div class="auth-card bg-white rounded-xl p-8">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800">Reset Password</h2>
                    <button id="close-forgot-modal" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="forgot-password-form" class="space-y-4">
                    <p class="text-sm text-gray-600 mb-4">Enter your email and we'll send you a link to reset your password.</p>
                    <div>
                        <label for="forgot-email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                        <input type="email" id="forgot-email" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500" required>
                    </div>
                    <button type="submit" class="w-full py-2 px-4 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                        Send Reset Link
                    </button>
                    <div class="text-center text-sm text-gray-600">
                        Remember your password? <button type="button" id="show-login-from-forgot" class="text-indigo-600 hover:text-indigo-800">Sign in</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Main App Container -->
    <div id="app-container" class="hidden">
        <!-- Navigation Bar -->
        <nav class="bg-white shadow-sm">
            <div class="container mx-auto px-4 py-3 flex justify-between items-center">
                <div class="flex items-center space-x-2">
                    <i class="fas fa-lightbulb text-indigo-600 text-xl"></i>
                    <span class="text-xl font-semibold text-gray-800">Flashcard Master</span>
                </div>
                <div class="flex items-center space-x-4">
                    <button id="profile-btn" class="flex items-center space-x-2 text-gray-700 hover:text-indigo-600">
                        <span id="user-name" class="hidden md:inline">John Doe</span>
                        <div class="w-8 h-8 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-600">
                            <i class="fas fa-user"></i>
                        </div>
                    </button>
                    <button id="logout-btn" class="text-gray-700 hover:text-indigo-600">
                        <i class="fas fa-sign-out-alt"></i>
                    </button>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <div class="container mx-auto px-4 py-8 max-w-4xl">
            <header class="mb-8 text-center">
                <h1 class="text-3xl font-bold text-indigo-700 mb-2">Flashcard Master</h1>
                <p class="text-gray-600">Create and study flashcards with ease</p>
            </header>

            <div class="bg-white rounded-xl shadow-md overflow-hidden mb-8">
                <div class="flex border-b">
                    <button id="ai-tab" class="tab-button active flex-1 py-4 px-6 text-center">
                        <i class="fas fa-robot mr-2"></i> AI Generator
                    </button>
                    <button id="manual-tab" class="tab-button flex-1 py-4 px-6 text-center">
                        <i class="fas fa-pen-fancy mr-2"></i> Manual Creator
                    </button>
                </div>

                <!-- AI Generator Section -->
                <div id="ai-section" class="p-6">
                    <div class="textarea-container mb-4">
                        <label for="input-text" class="block text-sm font-medium text-gray-700 mb-2">
                            Paste your text (1000-10000 characters)
                        </label>
                        <textarea 
                            id="input-text" 
                            rows="10" 
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
                            placeholder="Paste your study material here (e.g., textbook chapter, article, notes)..."></textarea>
                        <div id="char-counter" class="char-counter text-gray-500">0/10000</div>
                    </div>

                    <div class="flex justify-center">
                        <button 
                            id="generate-btn" 
                            class="px-6 py-3 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
                            disabled>
                            Generate Flashcards
                        </button>
                    </div>
                </div>

                <!-- Manual Creator Section -->
                <div id="manual-section" class="p-6 hidden">
                    <div class="mb-6">
                        <h3 class="text-lg font-medium text-gray-800 mb-4">Create New Flashcard</h3>
                        <div class="space-y-4">
                            <div>
                                <label for="manual-front" class="block text-sm font-medium text-gray-700 mb-1">Front (Question/Term)</label>
                                <textarea 
                                    id="manual-front" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-md edit-textarea" 
                                    maxlength="200"
                                    placeholder="Enter the question or term..."></textarea>
                                <div class="text-xs text-gray-500 text-right mt-1">
                                    <span id="manual-front-counter">0</span>/200 characters
                                </div>
                            </div>
                            <div>
                                <label for="manual-back" class="block text-sm font-medium text-gray-700 mb-1">Back (Answer/Definition)</label>
                                <textarea 
                                    id="manual-back" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-md edit-textarea" 
                                    maxlength="500"
                                    placeholder="Enter the answer or definition..."></textarea>
                                <div class="text-xs text-gray-500 text-right mt-1">
                                    <span id="manual-back-counter">0</span>/500 characters
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="flex justify-end space-x-3">
                        <button id="clear-manual" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                            Clear
                        </button>
                        <button id="add-manual" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                            Add Flashcard
                        </button>
                    </div>
                </div>
            </div>

            <div id="results-section" class="hidden">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold text-gray-800">Your Flashcards</h2>
                    <div class="flex items-center space-x-3">
                        <div class="text-sm text-gray-500">
                            <span id="flashcard-count">0</span> flashcards
                        </div>
                        <button id="export-btn" class="text-sm text-indigo-600 hover:text-indigo-800 flex items-center">
                            <i class="fas fa-file-export mr-1"></i> Export
                        </button>
                    </div>
                </div>

                <div id="flashcards-container" class="grid gap-4 md:grid-cols-2">
                    <!-- Flashcards will be inserted here -->
                </div>

                <div id="no-flashcards" class="text-center py-12 bg-gray-50 rounded-lg">
                    <i class="fas fa-lightbulb text-4xl text-yellow-400 mb-4"></i>
                    <p class="text-gray-500">No flashcards created yet. Use the AI generator or manual creator above.</p>
                </div>
            </div>

            <div id="loading-section" class="hidden text-center py-12">
                <div class="loading-dots text-indigo-600 text-2xl mb-4">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <p class="text-gray-600">AI is generating your flashcards...</p>
            </div>
        </div>

        <!-- Edit Modal -->
        <div id="edit-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
            <div class="bg-white rounded-xl shadow-xl p-6 w-full max-w-md">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Edit Flashcard</h3>
                    <button id="close-edit-modal" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Front</label>
                    <textarea id="edit-front" class="w-full px-3 py-2 border border-gray-300 rounded-md edit-textarea" maxlength="200"></textarea>
                    <div class="text-xs text-gray-500 text-right mt-1">
                        <span id="edit-front-counter">0</span>/200 characters
                    </div>
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Back</label>
                    <textarea id="edit-back" class="w-full px-3 py-2 border border-gray-300 rounded-md edit-textarea" maxlength="500"></textarea>
                    <div class="text-xs text-gray-500 text-right mt-1">
                        <span id="edit-back-counter">0</span>/500 characters
                    </div>
                </div>
                <div class="flex justify-end space-x-3">
                    <button id="cancel-edit" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                        Cancel
                    </button>
                    <button id="save-edit" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">
                        Save Changes
                    </button>
                </div>
            </div>
        </div>

        <!-- Export Modal -->
        <div id="export-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
            <div class="bg-white rounded-xl shadow-xl p-6 w-full max-w-md">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Export Flashcards</h3>
                    <button id="close-export-modal" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Select Format</label>
                    <div class="grid grid-cols-2 gap-3">
                        <button id="export-json" class="px-4 py-3 border border-gray-300 rounded-md hover:bg-gray-50 flex flex-col items-center">
                            <i class="fas fa-file-code text-2xl text-indigo-600 mb-2"></i>
                            <span>JSON</span>
                        </button>
                        <button id="export-csv" class="px-4 py-3 border border-gray-300 rounded-md hover:bg-gray-50 flex flex-col items-center">
                            <i class="fas fa-file-csv text-2xl text-indigo-600 mb-2"></i>
                            <span>CSV</span>
                        </button>
                    </div>
                </div>
                <div class="text-xs text-gray-500 mt-4">
                    <i class="fas fa-info-circle mr-1"></i> You can import these files back later
                </div>
            </div>
        </div>
    </div>

    <!-- Welcome Screen (shown when not logged in) -->
    <div id="welcome-screen" class="min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-50 to-blue-50">
        <div class="text-center px-4 py-12 max-w-2xl">
            <div class="mb-8">
                <i class="fas fa-lightbulb text-6xl text-indigo-600 mb-4"></i>
                <h1 class="text-4xl font-bold text-gray-800 mb-4">Flashcard Master</h1>
                <p class="text-xl text-gray-600 mb-8">The smart way to create, study, and master flashcards for any subject</p>
            </div>
            <div class="flex flex-col sm:flex-row justify-center gap-4 mb-8">
                <button id="show-login" class="px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition">
                    Sign In
                </button>
                <button id="show-register" class="px-6 py-3 bg-white text-indigo-600 border border-indigo-600 rounded-lg hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition">
                    Create Account
                </button>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto">
                <div class="bg-white p-6 rounded-lg shadow-sm hover:shadow-md transition">
                    <div class="text-indigo-600 text-3xl mb-4">
                        <i class="fas fa-brain"></i>
                    </div>
                    <h3 class="font-semibold text-lg mb-2">AI-Powered</h3>
                    <p class="text-gray-600">Generate flashcards automatically from your study materials</p>
                </div>
                <div class="bg-white p-6 rounded-lg shadow-sm hover:shadow-md transition">
                    <div class="text-indigo-600 text-3xl mb-4">
                        <i class="fas fa-layer-group"></i>
                    </div>
                    <h3 class="font-semibold text-lg mb-2">Organized</h3>
                    <p class="text-gray-600">Categorize and manage your flashcards with ease</p>
                </div>
                <div class="bg-white p-6 rounded-lg shadow-sm hover:shadow-md transition">
                    <div class="text-indigo-600 text-3xl mb-4">
                        <i class="fas fa-mobile-alt"></i>
                    </div>
                    <h3 class="font-semibold text-lg mb-2">Accessible</h3>
                    <p class="text-gray-600">Study anytime, anywhere on any device</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Auth Modal Event Listeners (Debugging with welcome screen hide) -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        console.log('DOM fully loaded, attaching auth modal event listeners');

        const welcomeScreen = document.getElementById('welcome-screen');
        console.log('welcomeScreen:', welcomeScreen);

        const showLoginBtn = document.getElementById('show-login');
        const showRegisterBtn = document.getElementById('show-register');
        const loginModal = document.getElementById('login-modal');
        const registerModal = document.getElementById('register-modal');
        const forgotPasswordModal = document.getElementById('forgot-password-modal');

        console.log('showLoginBtn:', showLoginBtn);
        console.log('showRegisterBtn:', showRegisterBtn);
        console.log('loginModal:', loginModal);
        console.log('registerModal:', registerModal);
        console.log('forgotPasswordModal:', forgotPasswordModal);

        const closeLoginModal = document.getElementById('close-login-modal');
        const closeRegisterModal = document.getElementById('close-register-modal');
        const closeForgotModal = document.getElementById('close-forgot-modal');

        console.log('closeLoginModal:', closeLoginModal);
        console.log('closeRegisterModal:', closeRegisterModal);
        console.log('closeForgotModal:', closeForgotModal);

        if (showLoginBtn && loginModal) {
          showLoginBtn.addEventListener('click', () => {
            console.log('Clicked show-login');
            loginModal.classList.remove('hidden');
            if (welcomeScreen) welcomeScreen.classList.add('hidden');
            if (registerModal) registerModal.classList.add('hidden');
            if (forgotPasswordModal) forgotPasswordModal.classList.add('hidden');
          });
        }

        if (showRegisterBtn && registerModal) {
          showRegisterBtn.addEventListener('click', () => {
            console.log('Clicked show-register');
            registerModal.classList.remove('hidden');
            if (welcomeScreen) welcomeScreen.classList.add('hidden');
            if (loginModal) loginModal.classList.add('hidden');
            if (forgotPasswordModal) forgotPasswordModal.classList.add('hidden');
          });
        }

        if (closeLoginModal && loginModal) {
          closeLoginModal.addEventListener('click', () => {
            console.log('Clicked close-login-modal');
            loginModal.classList.add('hidden');
            if (welcomeScreen) welcomeScreen.classList.remove('hidden');
          });
        }

        if (closeRegisterModal && registerModal) {
          closeRegisterModal.addEventListener('click', () => {
            console.log('Clicked close-register-modal');
            registerModal.classList.add('hidden');
            if (welcomeScreen) welcomeScreen.classList.remove('hidden');
          });
        }

        if (closeForgotModal && forgotPasswordModal) {
          closeForgotModal.addEventListener('click', () => {
            console.log('Clicked close-forgot-modal');
            forgotPasswordModal.classList.add('hidden');
            if (welcomeScreen) welcomeScreen.classList.remove('hidden');
          });
        }
      });
    </script>

    <!-- Initialize auth check -->
    <!-- checkAuth();  // Commented out to keep the welcome screen visible for testing modal functionality -->

    <!-- Global function for toggling password visibility -->
    <script is:inline>
      function togglePassword(inputId) {
        const input = document.getElementById(inputId);
        if (input) {
          if (input.type === 'password') {
            input.type = 'text';
          } else {
            input.type = 'password';
          }
        }
      }
    </script>

    <!-- Notification function to display messages -->
    <script is:inline>
      function showNotification(message, type) {
        const notification = document.createElement('div');
        notification.textContent = message;
        notification.style.position = 'fixed';
        notification.style.top = '20px';
        notification.style.right = '20px';
        notification.style.padding = '10px 20px';
        notification.style.backgroundColor = type === 'success' ? 'green' : 'red';
        notification.style.color = 'white';
        notification.style.borderRadius = '5px';
        notification.style.opacity = '0.9';
        notification.style.zIndex = '9999';
        document.body.appendChild(notification);
        setTimeout(() => {
          notification.remove();
        }, 3000);
      }
    </script>

    <!-- NEW REGISTRATION HANDLER INSERT -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const registerForm = document.getElementById('register-form');
        if (registerForm) {
          registerForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const nameInput = document.getElementById('register-name');
            const emailInput = document.getElementById('register-email');
            const passwordInput = document.getElementById('register-password');
            const confirmPasswordInput = document.getElementById('register-confirm-password');
            
            if (!nameInput || !emailInput || !passwordInput || !confirmPasswordInput) {
              console.error('Nie znaleziono pól formularza rejestracji.');
              return;
            }
            
            const name = nameInput.value.trim();
            const email = emailInput.value.trim();
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            
            if (password !== confirmPassword) {
              showNotification && showNotification('Passwords do not match', 'error');
              return;
            }
            
            if (password.length < 8) {
              showNotification && showNotification('Password must be at least 8 characters', 'error');
              return;
            }
            
            // Symulacja wywołania API (np. rejestracja użytkownika)
            setTimeout(() => {
              // Uaktualnienie interfejsu
              const userNameElement = document.getElementById('user-name');
              const welcomeScreen = document.getElementById('welcome-screen');
              const appContainer = document.getElementById('app-container');
              const registerModal = document.getElementById('register-modal');
              
              if (userNameElement) {
                userNameElement.textContent = name;
              }
              if (welcomeScreen) {
                welcomeScreen.classList.add('hidden');
                welcomeScreen.style.display = 'none';
              }
              if (appContainer) {
                appContainer.classList.remove('hidden');
                appContainer.style.display = 'block';
              }
              if (registerModal) {
                registerModal.classList.add('hidden');
              }
              
              registerForm.reset();
              showNotification && showNotification('Account created successfully!', 'success');
            }, 500);
          });
        }
      });
    </script>

    <!-- NEW LOGIN HANDLER INSERT -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const loginForm = document.getElementById('login-form');
        if (loginForm) {
          console.log('Login form found, attaching event listener');
          loginForm.addEventListener('submit', (e) => {
            console.log('Login form submitted');
            e.preventDefault();
            const emailInput = document.getElementById('login-email');
            const passwordInput = document.getElementById('login-password');
            if (!emailInput || !passwordInput) {
              console.error('Login form fields not found');
              return;
            }
            const email = emailInput.value.trim();
            const password = passwordInput.value;
            if (!email || !password) {
              showNotification && showNotification('Please fill in all login fields', 'error');
              return;
            }
            // Simulate an API call for login
            setTimeout(() => {
              if (email === 'user@example.com' && password === 'password123') {
                const userNameElement = document.getElementById('user-name');
                const welcomeScreen = document.getElementById('welcome-screen');
                const appContainer = document.getElementById('app-container');
                if (userNameElement) userNameElement.textContent = email;
                if (welcomeScreen) {
                  welcomeScreen.classList.add('hidden');
                  welcomeScreen.style.display = 'none';
                }
                if (appContainer) {
                  appContainer.classList.remove('hidden');
                  appContainer.style.display = 'block';
                }
                showNotification && showNotification('Logged in successfully!', 'success');
              } else {
                showNotification && showNotification('Invalid email or password', 'error');
              }
            }, 500);
          });
        }
      });
    </script>

    <!-- NEW FLASHCARDS FUNCTIONALITY INITIALIZATION -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        // Character counter for the AI generator text area
        const inputText = document.getElementById('input-text');
        const charCounter = document.getElementById('char-counter');
        const generateBtn = document.getElementById('generate-btn');
        if (inputText && charCounter) {
          inputText.addEventListener('input', () => {
            const currentLength = inputText.value.length;
            charCounter.textContent = currentLength + '/10000';
            if (generateBtn) {
              generateBtn.disabled = currentLength < 1000 || currentLength > 10000;
            }
          });
        }

        // Tab switching between AI Generator and Manual Creator
        const aiTab = document.getElementById('ai-tab');
        const manualTab = document.getElementById('manual-tab');
        const aiSection = document.getElementById('ai-section');
        const manualSection = document.getElementById('manual-section');

        if (aiTab && manualTab && aiSection && manualSection) {
          aiTab.addEventListener('click', () => {
            aiTab.classList.add('active');
            manualTab.classList.remove('active');
            aiSection.classList.remove('hidden');
            manualSection.classList.add('hidden');
          });
          manualTab.addEventListener('click', () => {
            manualTab.classList.add('active');
            aiTab.classList.remove('active');
            manualSection.classList.remove('hidden');
            aiSection.classList.add('hidden');
          });
        }

        // Manual Creator functionality initialization
        const manualFront = document.getElementById('manual-front');
        const manualBack = document.getElementById('manual-back');
        const manualFrontCounter = document.getElementById('manual-front-counter');
        const manualBackCounter = document.getElementById('manual-back-counter');
        const addManualBtn = document.getElementById('add-manual');
        const clearManualBtn = document.getElementById('clear-manual');

        function updateManualCreatorUI() {
          if (manualFront && manualFrontCounter) {
            manualFrontCounter.textContent = manualFront.value.length;
          }
          if (manualBack && manualBackCounter) {
            manualBackCounter.textContent = manualBack.value.length;
          }
          if (addManualBtn && manualFront && manualBack) {
            addManualBtn.disabled = (manualFront.value.length === 0 ||
                                    manualBack.value.length === 0 ||
                                    manualFront.value.length > 200 ||
                                    manualBack.value.length > 500);
          }
        }

        if (manualFront) {
          manualFront.addEventListener('input', updateManualCreatorUI);
        }
        if (manualBack) {
          manualBack.addEventListener('input', updateManualCreatorUI);
        }
        if (clearManualBtn) {
          clearManualBtn.addEventListener('click', () => {
            if (manualFront) manualFront.value = '';
            if (manualBack) manualBack.value = '';
            updateManualCreatorUI();
          });
        }
      });
    </script>
</body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }
</style>
