---
import type { RegisterUserCommand } from "../../types";

interface Props {
  isVisible: boolean;
}

const { isVisible } = Astro.props;
---

<div
  id="register-modal"
  class:list={["fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", { hidden: !isVisible }]}
>
  <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4">
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-2xl font-bold">Create Account</h2>
      <button id="close-register-modal" class="text-gray-500 hover:text-gray-700">
        <i class="fas fa-times"></i>
      </button>
    </div>

    <form id="register-form" class="space-y-4">
      <div>
        <label for="register-email" class="block text-sm font-medium text-gray-700">Email</label>
        <input
          type="email"
          id="register-email"
          name="email"
          required
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
        />
      </div>

      <div class="relative">
        <label for="register-password" class="block text-sm font-medium text-gray-700">Password</label>
        <div class="relative">
          <input
            type="password"
            id="register-password"
            name="password"
            required
            minlength="8"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          />
          <button
            type="button"
            onclick="togglePassword('register-password')"
            class="absolute inset-y-0 right-0 flex items-center pr-3 mt-1"
          >
            <i class="fas fa-eye text-gray-400 hover:text-gray-600"></i>
          </button>
        </div>
      </div>

      <div class="relative">
        <label for="register-confirm-password" class="block text-sm font-medium text-gray-700">Confirm Password</label>
        <div class="relative">
          <input
            type="password"
            id="register-confirm-password"
            name="confirmPassword"
            required
            minlength="8"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          />
          <button
            type="button"
            onclick="togglePassword('register-confirm-password')"
            class="absolute inset-y-0 right-0 flex items-center pr-3 mt-1"
          >
            <i class="fas fa-eye text-gray-400 hover:text-gray-600"></i>
          </button>
        </div>
      </div>

      <div class="flex items-center justify-end">
        <button type="button" id="show-login-from-register" class="text-sm text-indigo-600 hover:text-indigo-500"
          >Already have an account? Login</button
        >
      </div>

      <button
        type="submit"
        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >Create Account</button
      >
    </form>
  </div>
</div>

<script>
  import { showNotification } from "../../lib/utils/notifications";
  import { register } from "../../lib/services/authService";

  const registerForm = document.getElementById("register-form") as HTMLFormElement;
  const registerModal = document.getElementById("register-modal");
  const closeRegisterModal = document.getElementById("close-register-modal");
  const showLoginFromRegister = document.getElementById("show-login-from-register");

  if (registerForm && registerModal && closeRegisterModal && showLoginFromRegister) {
    registerForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(registerForm);
      const password = formData.get("password") as string;
      const confirmPassword = formData.get("confirmPassword") as string;

      if (password !== confirmPassword) {
        showNotification("Passwords do not match", "error");
        return;
      }

      const registerData: RegisterUserCommand = {
        email: formData.get("email") as string,
        password: password,
      };

      try {
        const response = await register(registerData);
        showNotification("Account created successfully!", "success");
        registerModal.classList.add("hidden");
        // Dispatch event to update UI and show login modal
        window.dispatchEvent(new CustomEvent("auth:register:success", { detail: response }));
      } catch (error) {
        showNotification(error instanceof Error ? error.message : "Registration failed", "error");
      }
    });

    closeRegisterModal.addEventListener("click", () => {
      registerModal.classList.add("hidden");
    });

    showLoginFromRegister.addEventListener("click", () => {
      registerModal.classList.add("hidden");
      window.dispatchEvent(
        new CustomEvent("modal:show", {
          detail: { modal: "login" },
        })
      );
    });
  }
</script>
