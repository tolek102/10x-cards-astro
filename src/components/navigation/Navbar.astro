---
import type { UserDto } from "../../types";

interface Props {
  user?: UserDto;
}

const { user } = Astro.props;
---

<nav class="bg-white shadow-sm">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16">
      <div class="flex">
        <div class="flex-shrink-0 flex items-center">
          <img class="h-8 w-auto" src="/logo.svg" alt="10x Flashcards" />
        </div>

        {
          user && (
            <div class="hidden sm:ml-6 sm:flex sm:space-x-8">
              <button
                id="creator-nav"
                class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium"
              >
                Creator
              </button>
              <button
                id="preview-nav"
                class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium"
              >
                Preview
              </button>
              <button
                id="learning-nav"
                class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium"
              >
                Learning
              </button>
            </div>
          )
        }
      </div>

      <div class="flex items-center">
        {
          user ? (
            <div class="flex items-center space-x-4">
              <span class="text-sm text-gray-700" id="user-name">
                {user.email}
              </span>
              <button
                id="logout-btn"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                Logout
              </button>
            </div>
          ) : (
            <div class="flex items-center space-x-4">
              <button
                id="show-login-btn"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-indigo-600 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                Login
              </button>
              <button
                id="show-register-btn"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                Register
              </button>
            </div>
          )
        }
      </div>
    </div>
  </div>
</nav>

<script>
  const creatorNav = document.getElementById("creator-nav");
  const previewNav = document.getElementById("preview-nav");
  const learningNav = document.getElementById("learning-nav");
  const logoutBtn = document.getElementById("logout-btn");
  const showLoginBtn = document.getElementById("show-login-btn");
  const showRegisterBtn = document.getElementById("show-register-btn");

  // Navigation events
  if (creatorNav && previewNav && learningNav) {
    [creatorNav, previewNav, learningNav].forEach((nav) => {
      nav.addEventListener("click", () => {
        const section = nav.id.replace("-nav", "");
        window.dispatchEvent(
          new CustomEvent("navigation:change", {
            detail: { section },
          })
        );
      });
    });
  }

  // Auth events
  if (logoutBtn) {
    logoutBtn.addEventListener("click", () => {
      window.dispatchEvent(new CustomEvent("auth:logout"));
    });
  }

  if (showLoginBtn) {
    showLoginBtn.addEventListener("click", () => {
      window.dispatchEvent(
        new CustomEvent("modal:show", {
          detail: { modal: "login" },
        })
      );
    });
  }

  if (showRegisterBtn) {
    showRegisterBtn.addEventListener("click", () => {
      window.dispatchEvent(
        new CustomEvent("modal:show", {
          detail: { modal: "register" },
        })
      );
    });
  }
</script>
